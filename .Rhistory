cat("4. info_content_plot.png - Information content line plot\n")
cat("5. combined_comparison_plot.png - Normalized comparison of all elements\n")
cat("6. statistical_boxplot.png - Boxplots showing distributions\n")
cat("7. density_plot.png - Density plots for each element type\n")
# Display summary statistics
cat("\n=== FINAL SUMMARY STATISTICS ===\n")
summary_stats <- data %>%
group_by(element_name) %>%
summarise(
count = n(),
min_value = min(as.numeric(value), na.rm = TRUE),
max_value = max(as.numeric(value), na.rm = TRUE),
mean_value = mean(as.numeric(value), na.rm = TRUE),
median_value = median(as.numeric(value), na.rm = TRUE),
.groups = 'drop'
)
print(summary_stats)
cat("\n=== ALL GRAPHS CREATED SUCCESSFULLY ===\n")
# Load required libraries
if (!require(ggplot2, quietly = TRUE)) {
install.packages("ggplot2")
library(ggplot2)
}
if (!require(dplyr, quietly = TRUE)) {
install.packages("dplyr")
library(dplyr)
}
if (!require(reshape2, quietly = TRUE)) {
install.packages("reshape2")
library(reshape2)
}
if (!require(gridExtra, quietly = TRUE)) {
install.packages("gridExtra")
library(gridExtra)
}
# Set file path
csv_file <- "D:/DataScience/ctcf-predictor/results/advanced_consensus_consensus_basic.csv"
# Check if file exists
if (!file.exists(csv_file)) {
stop("CSV file does not exist: ", csv_file)
}
# Read the CSV file
cat("Reading CSV file...\n")
data <- read.csv(csv_file, stringsAsFactors = FALSE)
# Display basic information about the data
cat("=== DATA OVERVIEW ===\n")
cat("Dimensions:", nrow(data), "rows x", ncol(data), "columns\n")
cat("Column names:", paste(names(data), collapse = ", "), "\n")
print(head(data, 10))
# Summary statistics
cat("\n=== SUMMARY STATISTICS ===\n")
print(summary(data))
cat("\n=== Creating PWM Line Plot ===\n")
# Filter PWM data
pwm_data <- data %>% filter(element_name == "pwm")
# Create line plot for PWM values
pwm_plot <- ggplot(pwm_data, aes(x = position, y = as.numeric(value))) +
geom_line(color = "blue", linewidth  = 1) +
geom_point(color = "red", size = 0.5, alpha = 0.6) +
labs(
title = "PWM (Position Weight Matrix) Values Across Positions",
subtitle = "CTCF Predictor Results",
x = "Position",
y = "PWM Value",
caption = "Data from advanced_consensus_consensus_basic.csv"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 10),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
scale_x_continuous(breaks = seq(0, max(pwm_data$position), by = 50))
# Save PWM plot
ggsave("D:/DataScience/ctcf-predictor/results/pwm_line_plot.png",
plot = pwm_plot, width = 12, height = 6, dpi = 300)
print(pwm_plot)
cat("\n=== Creating PWM Heatmap ===\n")
# Create heatmap data (reshape for better visualization)
pwm_matrix <- pwm_data %>%
mutate(row_group = ceiling(position / 20)) %>%  # Group positions into rows
select(row_group, position, value) %>%
mutate(value = as.numeric(value))
# Create heatmap
pwm_heatmap <- ggplot(pwm_matrix, aes(x = position, y = 1, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", mid = "white", high = "red",
midpoint = median(pwm_matrix$value, na.rm = TRUE),
name = "PWM Value") +
labs(
title = "PWM Values Heatmap",
subtitle = "Color intensity represents PWM values",
x = "Position",
y = ""
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid = element_blank()
)
# Save heatmap
ggsave("D:/DataScience/ctcf-predictor/results/pwm_heatmap.png",
plot = pwm_heatmap, width = 12, height = 3, dpi = 300)
print(pwm_heatmap)
cat("\n=== Creating Count Matrix Bar Plot ===\n")
# Filter count matrix data
count_data <- data %>% filter(element_name == "count_matrix")
# Create bar plot for count matrix (showing first 50 positions for clarity)
count_subset <- count_data %>%
filter(position <= 50) %>%
mutate(value = as.numeric(value))
count_plot <- ggplot(count_subset, aes(x = position, y = value)) +
geom_bar(stat = "identity", fill = "steelblue", alpha = 0.7) +
labs(
title = "Count Matrix Values (First 50 Positions)",
subtitle = "CTCF Predictor Results",
x = "Position",
y = "Count Value",
caption = "Showing first 50 positions for clarity"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 10)
)
# Save count plot
ggsave("D:/DataScience/ctcf-predictor/results/count_matrix_barplot.png",
plot = count_plot, width = 12, height = 6, dpi = 300)
print(count_plot)
cat("\n=== Creating Information Content Plot ===\n")
# Filter information content data
info_data <- data %>% filter(element_name == "info_content")
# Create line plot for information content
info_plot <- ggplot(info_data, aes(x = position, y = as.numeric(value))) +
geom_line(color = "darkgreen", size = 1.2) +
geom_point(color = "orange", size = 1, alpha = 0.7) +
labs(
title = "Information Content Across Positions",
subtitle = "CTCF Binding Site Information Content",
x = "Position",
y = "Information Content",
caption = "Higher values indicate more conserved positions"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 10)
) +
scale_x_continuous(breaks = seq(0, max(info_data$position), by = 20))
# Save information content plot
ggsave("D:/DataScience/ctcf-predictor/results/info_content_plot.png",
plot = info_plot, width = 12, height = 6, dpi = 300)
print(info_plot)
cat("\n=== Creating Combined Comparison Plot ===\n")
# Normalize values for comparison (scale to 0-1)
normalized_data <- data %>%
group_by(element_name) %>%
mutate(
value_numeric = as.numeric(value),
normalized_value = (value_numeric - min(value_numeric, na.rm = TRUE)) /
(max(value_numeric, na.rm = TRUE) - min(value_numeric, na.rm = TRUE))
) %>%
ungroup()
# Create comparison plot
comparison_plot <- ggplot(normalized_data, aes(x = position, y = normalized_value, color = element_name)) +
geom_line(size = 1, alpha = 0.8) +
labs(
title = "Normalized Comparison of All Elements",
subtitle = "PWM, Count Matrix, and Information Content (Normalized 0-1)",
x = "Position",
y = "Normalized Value",
color = "Element Type",
caption = "All values normalized to 0-1 scale for comparison"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 10),
legend.position = "bottom"
) +
scale_color_manual(values = c("pwm" = "blue", "count_matrix" = "red", "info_content" = "green")) +
facet_wrap(~ element_name, scales = "free_y", ncol = 1)
# Save comparison plot
ggsave("D:/DataScience/ctcf-predictor/results/combined_comparison_plot.png",
plot = comparison_plot, width = 12, height = 10, dpi = 300)
print(comparison_plot)
cat("\n=== Creating Statistical Summary Plots ===\n")
# Create boxplots for each element type
boxplot_data <- data %>%
mutate(value_numeric = as.numeric(value))
box_plot <- ggplot(boxplot_data, aes(x = element_name, y = value_numeric, fill = element_name)) +
geom_boxplot(alpha = 0.7) +
geom_jitter(width = 0.2, alpha = 0.3, size = 0.5) +
labs(
title = "Distribution of Values by Element Type",
subtitle = "Boxplots showing quartiles and outliers",
x = "Element Type",
y = "Value",
fill = "Element Type"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 10),
legend.position = "none"
) +
scale_fill_brewer(palette = "Set2")
# Save boxplot
ggsave("D:/DataScience/ctcf-predictor/results/statistical_boxplot.png",
plot = box_plot, width = 10, height = 6, dpi = 300)
print(box_plot)
cat("\n=== Creating Density Plots ===\n")
# Create density plots
density_plot <- ggplot(boxplot_data, aes(x = value_numeric, fill = element_name)) +
geom_density(alpha = 0.6) +
labs(
title = "Density Distribution of Values by Element Type",
subtitle = "Probability density functions for each element",
x = "Value",
y = "Density",
fill = "Element Type"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 10),
legend.position = "bottom"
) +
scale_fill_brewer(palette = "Set1") +
facet_wrap(~ element_name, scales = "free", ncol = 1)
# Save density plot
ggsave("D:/DataScience/ctcf-predictor/results/density_plot.png",
plot = density_plot, width = 10, height = 8, dpi = 300)
print(density_plot)
cat("\n=== ANALYSIS COMPLETE ===\n")
cat("Generated plots saved to: D:/DataScience/ctcf-predictor/results/\n")
cat("\nFiles created:\n")
cat("1. pwm_line_plot.png - Line plot of PWM values\n")
cat("2. pwm_heatmap.png - Heatmap visualization of PWM\n")
cat("3. count_matrix_barplot.png - Bar plot of count matrix\n")
cat("4. info_content_plot.png - Information content line plot\n")
cat("5. combined_comparison_plot.png - Normalized comparison of all elements\n")
cat("6. statistical_boxplot.png - Boxplots showing distributions\n")
cat("7. density_plot.png - Density plots for each element type\n")
# Display summary statistics
cat("\n=== FINAL SUMMARY STATISTICS ===\n")
summary_stats <- data %>%
group_by(element_name) %>%
summarise(
count = n(),
min_value = min(as.numeric(value), na.rm = TRUE),
max_value = max(as.numeric(value), na.rm = TRUE),
mean_value = mean(as.numeric(value), na.rm = TRUE),
median_value = median(as.numeric(value), na.rm = TRUE),
.groups = 'drop'
)
# Load required libraries
if (!require(ggplot2, quietly = TRUE)) {
install.packages("ggplot2")
library(ggplot2)
}
if (!require(dplyr, quietly = TRUE)) {
install.packages("dplyr")
library(dplyr)
}
if (!require(tidyr, quietly = TRUE)) {
install.packages("tidyr")
library(tidyr)
}
if (!require(gridExtra, quietly = TRUE)) {
install.packages("gridExtra")
library(gridExtra)
}
if (!require(RColorBrewer, quietly = TRUE)) {
install.packages("RColorBrewer")
library(RColorBrewer)
}
# Create the dataset from the HTML report data
pwm_data <- data.frame(
PWM_Name = c("best_pwm.rds", "efficient_aligned_pwm.rds", "generated_pwm.rds",
"pwm_aligned.rds", "robust_pwm.rds", "simple_aligned_pwm.rds",
"subset_pwm_all_sizes.rds_size_1000", "subset_pwm_all_sizes.rds_size_2000",
"subset_pwm_all_sizes.rds_size_5000", "subset_pwm_all_sizes.rds_size_10000",
"subset_pwm_size1000.rds", "subset_pwm_size10000.rds", "subset_pwm_size2000.rds",
"subset_pwm_size5000.rds", "test_simple_aligned_pwm.rds",
"test_subset_pwm_all_sizes.rds_size_1000", "test_subset_pwm_all_sizes.rds_size_2000",
"test_subset_pwm_all_sizes.rds_size_5000", "test_subset_pwm_all_sizes.rds_size_10000",
"test_subset_pwm_size1000.rds", "test_subset_pwm_size10000.rds",
"test_subset_pwm_size2000.rds", "test_subset_pwm_size5000.rds"),
Method = c("high_quality_subset", "efficient_aligned", "unknown", "unknown", "unknown",
"simple_aligned", rep("high_quality_subset", 4), rep("high_quality_subset", 4),
"simple_aligned", rep("high_quality_subset", 8)),
Positions = c(237, 216, 163, 163, 226, 216, 237, 237, 237, 237, 237, 237, 237, 237,
216, 221, 236, 236, 236, 221, 236, 236, 236),
Total_Info = c(15.565, 0.695, 7.481, 20.519, 2.473, 0.695, 19.592, 12.564, 10.659, 4.757,
19.592, 4.757, 12.564, 10.659, 0.695, 5.993, 11.749, 9.837, 6.788,
5.993, 6.788, 11.749, 9.837),
Conserved_Positions = c(2, 0, 0, 0, 1, 0, 2, 1, 0, 1, 2, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
Avg_Info = c(0.066, 0.003, 0.046, 0.126, 0.011, 0.003, 0.083, 0.053, 0.045, 0.020,
0.083, 0.020, 0.053, 0.045, 0.003, 0.027, 0.050, 0.042, 0.029,
0.027, 0.029, 0.050, 0.042),
stringsAsFactors = FALSE
)
# Add sample size information based on PWM names
pwm_data$Sample_Size <- ifelse(grepl("1000", pwm_data$PWM_Name), "1000",
ifelse(grepl("2000", pwm_data$PWM_Name), "2000",
ifelse(grepl("5000", pwm_data$PWM_Name), "5000",
ifelse(grepl("10000", pwm_data$PWM_Name), "10000", "Other"))))
# Create simplified PWM names for better visualization
pwm_data$PWM_Simple <- gsub("\\.rds.*", "", gsub("test_|subset_pwm_all_sizes\\.rds_size_|subset_pwm_size", "", pwm_data$PWM_Name))
cat("=== PWM Comparison Report Statistical Analysis ===\n")
cat("Total PWMs analyzed:", nrow(pwm_data), "\n")
cat("Methods used:", paste(unique(pwm_data$Method), collapse = ", "), "\n")
cat("Best overall information content:", max(pwm_data$Total_Info), "bits\n")
cat("Best average per position:", max(pwm_data$Avg_Info), "bits\n\n")
cat("Creating Total Information Content by Method plot...\n")
info_by_method <- ggplot(pwm_data, aes(x = Method, y = Total_Info, fill = Method)) +
geom_boxplot(alpha = 0.7) +
geom_jitter(width = 0.2, alpha = 0.6, size = 2) +
labs(
title = "Total Information Content by PWM Method",
subtitle = "Distribution of information content across different PWM construction methods",
x = "PWM Construction Method",
y = "Total Information Content (bits)",
caption = "Data from enhanced_pwm_comparison_report.html"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 10),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
) +
scale_fill_brewer(palette = "Set2")
ggsave("D:/DataScience/ctcf-predictor/results/total_info_by_method.png",
plot = info_by_method, width = 12, height = 8, dpi = 300)
print(info_by_method)
cat("Creating Average vs Total Information Content scatter plot...\n")
avg_vs_total <- ggplot(pwm_data, aes(x = Avg_Info, y = Total_Info, color = Method, size = Positions)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, color = "black", linewidth = 0.5) +
labs(
title = "Average vs Total Information Content",
subtitle = "Relationship between average and total information content (bubble size = positions)",
x = "Average Information Content per Position (bits)",
y = "Total Information Content (bits)",
color = "Method",
size = "Positions"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 10)
) +
scale_color_brewer(palette = "Set1")
ggsave("D:/DataScience/ctcf-predictor/results/avg_vs_total_info.png",
plot = avg_vs_total, width = 12, height = 8, dpi = 300)
print(avg_vs_total)
cat("Creating Conserved Positions analysis plot...\n")
conserved_plot <- ggplot(pwm_data, aes(x = Method, y = Conserved_Positions, fill = Method)) +
geom_bar(stat = "identity", alpha = 0.7, position = "dodge") +
facet_wrap(~ Sample_Size, scales = "free_x") +
labs(
title = "Number of Conserved Positions by Method and Sample Size",
subtitle = "Conserved positions (>1 bit information content) across different methods",
x = "PWM Construction Method",
y = "Number of Conserved Positions",
fill = "Method"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 10),
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(face = "bold")
) +
scale_fill_brewer(palette = "Dark2")
ggsave("D:/DataScience/ctcf-predictor/results/conserved_positions_analysis.png",
plot = conserved_plot, width = 14, height = 10, dpi = 300)
print(conserved_plot)
cat("Creating Sample Size Effect analysis plot...\n")
# Filter data for sample size analysis
sample_size_data <- pwm_data %>%
filter(Sample_Size %in% c("1000", "2000", "5000", "10000")) %>%
mutate(Sample_Size_Numeric = as.numeric(Sample_Size))
if (nrow(sample_size_data) > 0) {
sample_size_plot <- ggplot(sample_size_data, aes(x = Sample_Size_Numeric, y = Total_Info, color = Method)) +
geom_point(size = 3, alpha = 0.7) +
geom_line(aes(group = Method), linewidth = 1, alpha = 0.8) +
scale_x_log10(breaks = c(1000, 2000, 5000, 10000)) +
labs(
title = "Effect of Sample Size on Information Content",
subtitle = "How sample size affects total information content across methods",
x = "Sample Size (log scale)",
y = "Total Information Content (bits)",
color = "Method"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 10)
) +
scale_color_brewer(palette = "Set1")
ggsave("D:/DataScience/ctcf-predictor/results/sample_size_effect.png",
plot = sample_size_plot, width = 12, height = 8, dpi = 300)
print(sample_size_plot)
}
cat("Creating Top Performing PWMs comparison plot...\n")
# Select top 10 PWMs by total information content
top_pwms <- pwm_data %>%
arrange(desc(Total_Info)) %>%
head(10)
top_pwms_plot <- ggplot(top_pwms, aes(x = reorder(PWM_Simple, Total_Info), y = Total_Info, fill = Method)) +
geom_col(alpha = 0.8) +
coord_flip() +
labs(
title = "Top 10 PWMs by Total Information Content",
subtitle = "Best performing PWMs ranked by total information content",
x = "PWM Name",
y = "Total Information Content (bits)",
fill = "Method"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 10)
) +
scale_fill_brewer(palette = "Spectral")
ggsave("D:/DataScience/ctcf-predictor/results/top_pwms_comparison.png",
plot = top_pwms_plot, width = 12, height = 8, dpi = 300)
print(top_pwms_plot)
cat("Creating Method Performance Summary plot...\n")
method_summary <- pwm_data %>%
group_by(Method) %>%
summarise(
Count = n(),
Mean_Total_Info = mean(Total_Info),
SD_Total_Info = sd(Total_Info),
Mean_Avg_Info = mean(Avg_Info),
SD_Avg_Info = sd(Avg_Info),
Total_Conserved = sum(Conserved_Positions),
.groups = 'drop'
)
method_performance <- ggplot(method_summary, aes(x = Method, y = Mean_Total_Info, fill = Method)) +
geom_col(alpha = 0.7) +
geom_errorbar(aes(ymin = Mean_Total_Info - SD_Total_Info,
ymax = Mean_Total_Info + SD_Total_Info),
width = 0.2, alpha = 0.8) +
geom_text(aes(label = paste("n =", Count)), vjust = -0.5, size = 3) +
labs(
title = "Method Performance Summary",
subtitle = "Mean total information content with standard deviation error bars",
x = "PWM Construction Method",
y = "Mean Total Information Content (bits)",
fill = "Method"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 10),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
) +
scale_fill_brewer(palette = "Set3")
ggsave("D:/DataScience/ctcf-predictor/results/method_performance_summary.png",
plot = method_performance, width = 12, height = 8, dpi = 300)
print(method_performance)
cat("Creating Combined Dashboard...\n")
# Create a 2x2 dashboard
dashboard <- grid.arrange(
info_by_method + theme(legend.position = "none"),
avg_vs_total + theme(legend.position = "none"),
top_pwms_plot + theme(legend.position = "none"),
method_performance,
ncol = 2, nrow = 2,
top = "PWM Comparison Report - Statistical Dashboard"
)
ggsave("D:/DataScience/ctcf-predictor/results/pwm_analysis_dashboard.png",
plot = dashboard, width = 16, height = 12, dpi = 300)
cat("\n=== SUMMARY STATISTICS ===\n")
print(method_summary)
cat("\n=== TOP 5 PERFORMING PWMs ===\n")
top_5 <- pwm_data %>%
arrange(desc(Total_Info)) %>%
select(PWM_Name, Method, Total_Info, Avg_Info, Conserved_Positions) %>%
head(5)
print(top_5)
cat("\n=== FILES CREATED ===\n")
cat("1. total_info_by_method.png - Boxplot of information content by method\n")
cat("2. avg_vs_total_info.png - Scatter plot of average vs total information\n")
cat("3. conserved_positions_analysis.png - Bar chart of conserved positions\n")
cat("4. sample_size_effect.png - Line plot showing sample size effects\n")
cat("5. top_pwms_comparison.png - Bar chart of top performing PWMs\n")
cat("6. method_performance_summary.png - Summary statistics by method\n")
cat("7. pwm_analysis_dashboard.png - Combined dashboard view\n")
cat("\n=== ANALYSIS COMPLETE ===\n")
cat("All statistical graphs have been created and saved to:\n")
cat("D:/DataScience/ctcf-predictor/results/\n")
runApp('D:/DataScience/UI/DS_Final_UI')
runApp('D:/DataScience/UI/DS_Final_UI')
runApp('D:/DataScience/UI/DS_Final_UI')
runApp('D:/DataScience/UI/DS_Final_UI')
runApp('D:/DataScience/UI/DS_Final_UI')
runApp('D:/DataScience/UI/DS_Final_UI')
runApp('D:/DataScience/UI/DS_Final_UI')
runApp('D:/DataScience/UI/DS_Final_UI')
runApp('D:/DataScience/UI/DS_Final_UI')
runApp('D:/DataScience/UI/DS_Final_UI')
runApp('D:/DataScience/UI/DS_Final_UI')
